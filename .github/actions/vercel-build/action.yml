name: Vercel Build

description: Build to deploy to vercel

inputs:
  project_name:
    description: "The working directory/project name you're trying to build. Example: 'www', 'blog'"
    required: true
  NODE_ENV:
    description: ""
    required: true
  VERCEL_TOKEN:
    description: "Vercel token for authentication"
    required: true
  VERCEL_ORG_ID:
    description: "Vercel organization ID"
    required: true
  VERCEL_PROJECT_ID:
    description: "Vercel project ID"
    required: true
  NEXT_PUBLIC_WWW_URL:
    description: ""
    required: true
  NEXT_PUBLIC_BLOG_URL:
    description: ""
    required: true
  NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID:
    description: ""
    required: true
  NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID:
    description: ""
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/pnpm-install
    - uses: ./.github/actions/setup-env
      with:
        NODE_ENV: ${{ inputs.NODE_ENV }}
        NEXT_PUBLIC_WWW_URL: ${{ inputs.NEXT_PUBLIC_WWW_URL }}
        NEXT_PUBLIC_BLOG_URL: ${{ inputs.NEXT_PUBLIC_BLOG_URL }}
        NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID: ${{ inputs.NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID }}
        NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID: ${{ inputs.NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID }}

    - name: Set Env Vars on Vercel Project
      uses: dkershner6/vercel-set-env-action@v3
      env:
        NEXT_PUBLIC_WWW_URL: ${{ inputs.NEXT_PUBLIC_WWW_URL }}
        TARGET_NEXT_PUBLIC_WWW_URL: ${{ inputs.NODE_ENV }} # comma delimited, one of [production, preview, development]
        TYPE_NEXT_PUBLIC_WWW_URL: plain # one of [plain, encrypted]

        NEXT_PUBLIC_BLOG_URL: ${{ inputs.NEXT_PUBLIC_BLOG_URL }}
        TARGET_NEXT_PUBLIC_BLOG_URL: ${{ inputs.NODE_ENV }}
        TYPE_NEXT_PUBLIC_BLOG_URL: plain

        # NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID: ${{ inputs.NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID }}
        # TARGET_NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID: ${{ inputs.NODE_ENV }}
        # TYPE_NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID: plain

        NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID: ${{ inputs.NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID }}
        TARGET_NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID: ${{ inputs.NODE_ENV }}
        TYPE_NEXT_PUBLIC_BLOG_GOOGLE_ANALYTICS_ID: plain

      with:
        token: ${{ inputs.VERCEL_TOKEN }}
        teamId: ${{ inputs.VERCEL_ORG_ID }}
        projectName: ${{ inputs.project_name }}
        envVariableKeys: NEXT_PUBLIC_BLOG_URL,NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID, NEXT_PUBLIC_WWW_GOOGLE_ANALYTICS_ID

    - name: Build for Vercel
      shell: bash
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ inputs.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ inputs.VERCEL_PROJECT_ID }}
      run: |

        # declare -A env_vars

        # # Fetch existing environment variables from Vercel
        # echo "Fetching existing environment variables from Vercel..."
        # existing_vars=$(pnpm vercel env ls $NODE_ENV --token=$VERCEL_TOKEN | awk 'NR > 4 {print $1}')
        # echo $existing_vars
        # # Remove all existing variables from Vercel
        # for var in $existing_vars; do
        #   echo "Removing $var from Vercel..."
        #   pnpm vercel env rm "$var" --token=$VERCEL_TOKEN  $NODE_ENV -y
        # done

        # # Read variables from the .env file
        # echo "Reading variables from .env file..."
        # while IFS='=' read -r key value; do
        #   if [[ -n "$key" && -n "$value" && ! "$key" =~ ^# ]]; then
        #     env_vars[$key]="$value"
        #   fi
        # done < .env

        # # Add variables from .env to Vercel
        # for key in "${!env_vars[@]}"; do
        #   echo "Adding $key to Vercel..."
        #   echo "${env_vars[$key]}" | pnpm vercel env add "$key" $NODE_ENV --token=$VERCEL_TOKEN 
        # done

        # echo "Environment synchronization with Vercel completed successfully."

        cd apps/${{ inputs.project_name }} && pnpm --filter @ashgw/${{ inputs.project_name }} build:vercel --token=$VERCEL_TOKEN
